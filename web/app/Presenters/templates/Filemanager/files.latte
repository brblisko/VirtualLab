{extends '../@layout.latte'}
{block content}
    <h1>File Manager</h1>

    {if $flashes}
        <div class="flash-messages">
            {foreach $flashes as $flash}
                <div class="alert alert-{$flash->type}">
                    {if is_string($flash->message)}
                        {$flash->message}
                    {else}
                        {$flash->message|json_encode}
                    {/if}
                </div>
            {/foreach}
        </div>
    {/if}



    {control uploadForm}

    <hr>

<h2>Files</h2>
{if $contents}
    <ul class="tree">
        {foreach $contents as $item}
           <li {if $item['isDirectory']}class="directory"{/if} path={$item['path']}>
                {if $item['isDirectory']}
                    <strong>{$item['name']}</strong> <!-- Render directory name -->
                    <a href="{link 'Filemanager:deleteDir', $item['path']}" class="btn btn-danger btn-sm">Delete</a>
                {else}
                    <a href="{link 'Filemanager:download', 'fileName' => $item['path']}" download>{$item['name']}</a> <!-- Render file name -->
                    <a href="{link 'Filemanager:delete', $item['path']}" class="btn btn-danger btn-sm">Delete</a>
                {/if}
            </li>
        {/foreach}
    </ul>
{else}
    <p>No files or directories found.</p>
{/if}
{/block}

{block scripts}
<script>
    window.addEventListener('DOMContentLoaded', () => {
        moveListItems();
        adjustLeftMargin();
    });

    function moveListItems() {
        // Select the tree ul element
        var tree = document.querySelector('ul.tree');
        
        // Select all list items within the tree
        var listItems = tree.querySelectorAll('li');
        
        // Sort list items based on their paths
        var sortedListItems = Array.from(listItems).sort(function(a, b) {
            var pathA = a.getAttribute('path');
            var pathB = b.getAttribute('path');
            return pathA.localeCompare(pathB);
        });
        
        // Reorder list items based on the paths hierarchy
        sortedListItems.forEach(function(item) {
            // Check if the item is a directory
            if (item.classList.contains('directory')) {
                // Get the path of the directory
                var directoryPath = item.getAttribute('path');
                
                // Select children files without class directory
                var childrenFiles = sortedListItems.filter(function(childItem) {
                    return childItem !== item && 
                        !childItem.classList.contains('directory') && 
                        childItem.getAttribute('path').startsWith(directoryPath + '/');
                });
                
                // Select children directories
                var childrenDirectories = sortedListItems.filter(function(childItem) {
                    return childItem !== item && 
                        childItem.classList.contains('directory') && 
                        childItem.getAttribute('path').startsWith(directoryPath + '/');
                });
                
                // Reorder the items
                var reorderedChildren = childrenFiles.concat(childrenDirectories);
                reorderedChildren.forEach(function(child) {
                    item.appendChild(child);
                });
            }
        });
    }

    function adjustLeftMargin() {
        // Select the tree ul element
        var tree = document.querySelector('ul.tree');
        
        // Select all list items within the tree
        var listItems = tree.querySelectorAll('li');
        
        // Loop through each list item
        listItems.forEach(function(item) {
            // Get the path of the current item
            var path = item.getAttribute('path');
            
            // Count the number of "/" characters in the path
            var depth = (path.match(/\//g) || []).length;
            
            // Set the left margin based on the depth
            var marginLeft = depth * 10; // 20px for each "/"
            item.style.marginLeft = marginLeft + 'px';
        });
    }
</script>
{/block}