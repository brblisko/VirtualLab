{extends '../@layout.latte'}
{block content}
    <h1>File Manager</h1>

    {if $flashes}
    <div class="alert-container">
        <div n:foreach="$flashes as $flash" n:class="alert, 'alert-' . $flash->type">{$flash->message}</div>
    </div>
    {/if}



    {control uploadForm}

    <hr>

<h2>Files</h2>
<button data-download-url="{link 'Filemanager:downloadDir', ""}" class="downloadButton">üîΩ Download All Files</button>
{if $contents}
    <ul class="tree">
        {foreach $contents as $item}
           <li {if $item['isDirectory']}class="directory" {else} class="file"{/if} path={$item['path']}>
                {if $item['isDirectory']}
                    <span class="name"> <strong>{$item['path']}</strong> </span>
                    <div class="actions">
                    <button data-delete-url="{link 'Filemanager:deleteDir', $item['path']}" class="deleteButton">‚ùå Delete Directory "{$item['path']}"</button>
                    <button data-download-url="{link 'Filemanager:downloadDir', $item['path']}" class="downloadButton">üîΩ Download Directory "{$item['path']}"</button>
                    </div>
                {else}
                    <span class="name"><a >{$item['name']}</a> </span>
                    <div class="actions">
                    <button data-delete-url="{link 'Filemanager:delete', $item['path']}" class="deleteButton">‚ùå Delete File "{$item['path']}"</button>
                    <button data-download-url="{link 'Filemanager:download', 'fileName' => $item['path']}" class="downloadButton">üîΩ Download File "{$item['path']}"</button>
                    </div>
                {/if}
            </li>
        {/foreach}
    </ul>
{else}
    <p>No files or directories found.</p>
{/if}
{/block}

{block scripts}
<script>

    function fixDelButtons()
    {
        const buttons = document.querySelectorAll('.deleteButton');

        buttons.forEach(button => {
            button.onclick = function() {
                const url = button.getAttribute('data-delete-url');

                
                window.location.href = url;
            }
        });
    }

    function fixDownloadButtons()
    {
        const buttons = document.querySelectorAll('.downloadButton');

        buttons.forEach(button => {
            button.onclick = function() {
                const url = button.getAttribute('data-download-url');

                
                window.location.href = url;
            }
        });
    }


    window.addEventListener('DOMContentLoaded', () => {
        fixDelButtons();
        fixDownloadButtons();
        
        sortAndMoveItems();
    });

    function reorderItems(sortedListItems)
    {
        sortedListItems.forEach(function(item) {
            // Check if the item is a directory
            if (item.classList.contains('directory')) {
                // Get the path of the directory
                var directoryPath = item.getAttribute('path');
                
                // Select children files
                var childrenFiles = sortedListItems.filter(function(childItem) {
                    return childItem !== item && 
                        !childItem.classList.contains('directory') && 
                        childItem.getAttribute('path').startsWith(directoryPath + '/');
                });
                
                // Select children directories
                var childrenDirectories = sortedListItems.filter(function(childItem) {
                    return childItem !== item && 
                        childItem.classList.contains('directory') && 
                        childItem.getAttribute('path').startsWith(directoryPath + '/');
                });
                
                // Reorder the items
                var reorderedChildren = childrenFiles.concat(childrenDirectories);
                reorderedChildren.forEach(function(child) {
                    item.appendChild(child);
                });
            }
        });
    }

    function sortAndMoveItems() {
        // Select the tree ul element
        var tree = document.querySelector('ul.tree');
        
        // Select all list items within the tree
        var listItems = tree.querySelectorAll('li');
        
        // Sort list items based on their paths
        var sortedListItems = Array.from(listItems).sort(function(a, b) {
            var pathA = a.getAttribute('path');
            var pathB = b.getAttribute('path');
            return pathA.localeCompare(pathB);
        });
        
        console.log(sortedListItems);
        // Reorder list items based on the paths hierarchy
        reorderItems(sortedListItems);
    }
</script>
{/block}



